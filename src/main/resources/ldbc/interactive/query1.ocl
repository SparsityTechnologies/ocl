context System:: FriendsWithCertainName (
    personId: String, 
    personFirstName: String
    )
  :Sequence(Tuple (id: String, lastName: String, birthday: Date, creationDate: DateTime, gender: String,
        browserUsed:String, locationIP: String, emails:Set(String), language: Set(String), placeName:String, universityName:
        String, classYear: int, universityCityName:String, companyName: String, workFrom: String, workFromCountry: String)) 

   body:
   let person:Person = Person.allInstances()->select(p| p.code = personId) in

   person.friend->sortedBy(lastName, -personId)->asSequence()->union (person.friend->sortedBy(lastName, -personId) ->
       collect (friend->asSequence()->union(f | f.friend->sortedBy(lastName, -personId)->asSequence()))->
       excluding(person)->select(p| p.firstName = personFirstName))->subSequence(1,20)->collect(p| Tuple{
         id = p.id,
         lastName = p.lastName,
         birthday = p.birthday,
         creationDate = p.creationDate,
         gender = p.gender,
         browserUsed = p.browserUsed,
         locationIP = p.locationIP,
         emails = p.email,
         language = p.language,
         placeName = p.placeName,
         universityName = p.university.name,
         classYear = p.classYear,
         universityCityName = p.university.city.name,
         companyName = p.company.name,
         workFrom = p.workFrom,
         workFromCountry = p.company.country.name
         })

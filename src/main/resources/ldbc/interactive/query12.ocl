context System::ExpertSearch(
personId: String,
tagClassName: String
) : Set(Tuple(personId: String, personFirstName:String, personLastName:String, tagName : String, count: Integer))
body:
let person:Person = Person.allInstances()->select(p| p.code = personId) in
let tagClass: TagClass = TagClass.allInstances()->select(t | t.name = tagClassName) in
let comments:Set( Tuple (comment: Comment, tag: Tag)) =
person.friends->collect(messages)->asSet()->select(
m| m.oclIsTypeOf(Comment) and m.message.oclIsTypeOf(Post))->collect(c|
c.tag->collect(t|
  Tuple{
    comment: c,
      tag: t
  })
)->flatten()->select(t| t.tag->includes(t| t.tagClass ->includes(tagClass->closure(subclass)->union(tagClass)))) in

comments->collect(author)->asSet()->collect(p|
Tuple{
  personId = p.ID,
  personFirstName = p.firstName,
  personLastName = p.lastName,
  count = comments->select(c| person.messages->includes(c.comment))->size()
}
)->sortedBy(count)->subOrderedSet(1,20)
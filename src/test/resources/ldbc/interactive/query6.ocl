context System::TagCoOccurrence(
personId: String,
tagName: String)
:Set(Tuple(tagName: String, count: Integer))

body:
let person:Person = Person.allInstances()->select(p| p.code = personId) in
let tag: Tag = Tag.allInstances() ->select(name = tagName) in
let friends:Set(Person) = person.friend->union(person.friend -> collect(friend))->asSet() ->excluding(person) in
let validMessages: Set(Message) =
tag.messages->select(m| friends->includes(author)) in

validMessages->collect(tag)->asSet()->collect(Tuple{ tagName =  name, count = messages->intersection(validMessages)->count()})
->sortedBy(count, -tagName)->subOrderedSet(1,10)
context System::FriendRecommendation(
personId: String,
month: integer
) : Set(Tuple(personId: String, personFirstName:String, personLastName:String, similarity: Integer, personGender: String, personLocationName: String))

body:
let person:Person = Person.allInstances()->select(p| p.code = personId) in
let friends:Set(Person) = person.friend->collect(friend)->excluding(person->union(person.friend)) in
friends->select( broned.before(21, mothn)  and borned.after(22, motnth+1))->collect( f | Tuple{
   friend = f,
   similarity = (f.messages->select(m | m.oclIsTypeOf(Post) and not m.tag->intersection(person.tag)->isEmpty()) -
   f.messages->select(m | m.oclIsTypeOf(Post) and m.tag->intersection(person.tag)->isEmpty()))
})->collect( t|
Tuple{
  personId = t.friend.id,
  personFirstName = t.friend.firstName,
  personLastName = t.friend.lastName,
  similarity = t.similarity,
  personGender = t.friend.gender,
  personLocationName = t.friend.location.name
})